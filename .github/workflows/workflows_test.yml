#
# Copyright (c) 2019-2020 P3TERX <https://p3terx.com>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#
# https://github.com/P3TERX/Actions-OpenWrt
# Description: Build OpenWrt using GitHub Actions
#

name: Build  Zero 1 OpenWrt

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'
  watch:
     types: started

env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: config/opzero_1.config
  DIY_P1_SH: scripts/diy-part1.sh
  DIY_P2_SH: scripts/diy-part2.sh
  UPLOAD_BIN_DIR: true
  UPLOAD_FIRMWARE: true
  UPLOAD_COWTRANSFER: true
  UPLOAD_WETRANSFER: true
  UPLOAD_RELEASE: false
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-18.04

    steps:
    - name: Checkout
      uses: actions/checkout@main

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install $(curl -fsSL git.io/depends-ubuntu-1804)
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir
        ###
        sudo -E apt-get -qq  install g++-arm-linux-gnueabi
        sudo -E apt-get -qq  install gcc-arm-linux-gnueabi
        sudo -E apt-get -qq  install libc6-armel-cross libc6-dev-armel-cross binutils-arm-linux-gnueabi libncurses5-dev
        sudo -E apt-get -qq install gcc-arm-linux-gnueabi g++-arm-linux-gnueabi
        


    - name: Clone source code
      working-directory: /workdir
      run: |
        wget https://dl.google.com/go/go1.15.2.linux-amd64.tar.gz 
        sudo  -E tar -xvf go1.15.2.linux-amd64.tar.gz   
        sudo -E mv go /usr/local  
        export GOROOT=/usr/local/go 
        export GOPATH=${PWD}/gopath
        export PATH=$GOPATH/bin:$GOROOT/bin:$PATH 
        go version

    - name: build
      working-directory: /workdir
      run: |
        export GOROOT=/usr/local/go 
        export GOPATH=${PWD}/gopath
        export PATH=$GOPATH/bin:$GOROOT/bin:$PATH 
        go version
        go get -d github.com/rfjakob/gocryptfs
        cd $(go env GOPATH)/src/github.com/rfjakob/gocryptfs
        ./build.bash
       

    
